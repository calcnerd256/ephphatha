function init(){

this.storeAt(
 ["apiState","/admin/dumbWrite/"],
 [
  "(\r",
  " function(form){\r",
  "  [\"path\", \"expr\"].map(\r",
  "   function(name){return new TextAreaField(name);}\r",
  "  ).map(\r",
  "   function(field){\r",
  "    return form.fields.push(field);\r",
  "   }\r",
  "  );\r",
  "  form.that = this;\r",
  "  form.process = function(ob){\r",
  "   var path = ob.path.split(\"\\n\").map(\r",
  "    function(s){\r",
  "     //trim only one trailing \"\\r\" character\r",
  "     if(!s.length) return s;\r",
  "     if(\"\\r\" != s[s.length - 1]) return s;\r",
  "     return s.substring(0, s.length - 1);\r",
  "    }\r",
  "   );\r",
  "   var str = [\r",
  "    \"this.storeAt(\",\r",
  "    \" \" +\r",
  "     JSON.stringify(path) +\r",
  "     \",\",\r",
  "    \" [\",\r",
  "    \"  \" +\r",
  "     ob.expr.split(\"\\n\").map(\r",
  "      function(s){return JSON.stringify(s);}\r",
  "     ).join(\",\\n  \"),\r",
  "    \" ].join(\\\"\\\\n\\\")\",\r",
  "    \")\"\r",
  "   ].join(\"\\n\");\r",
  "   var i = this.that.storeExecString(str)[0];\r",
  "   return {\r",
  "    ID: +i,\r",
  "    toHtml: function toHtml(){\r",
  "     return \"stored in \" + i + \" and eval'd storage\";\r",
  "    }\r",
  "   };\r",
  "  };\r",
  "  return form;\r",
  " }.bind(this)\r",
  ")(new SimpleFormController());"
 ].join("\n")
);

this.storeAt(
 ["apiState","/admin/eval/"],
 [
  "(\r",
  " function(form){\r",
  "  form.fields.push(\r",
  "   (\r",
  "    function(field){\r",
  "     field.toHtml = function toHtml(){\r",
  "      return \"<textarea name=\\\"\" + this.name + \"\\\"></textarea>\";\r",
  "     }\r",
  "     return field;\r",
  "    }.bind(this)\r",
  "   )(new FormField(\"expr\"))\r",
  "  );\r",
  "  var that = this;\r",
  "  form.that = this;\r",
  "  form.process = function process(ob){\r",
  "   var i = this.that.storeExecString(ob.expr)[0];\r",
  "   return {\r",
  "    ID: +i,\r",
  "    toHtml: function(){return \"stored in \" + i + \" and exec'd\";}\r",
  "   };\r",
  "  };\r",
  "  form.public = false;\r",
  "  return form;\r",
  " }.bind(this)\r",
  ")(new SimpleFormController());"
 ].join("\n")
);

this.storeAt(
 ["prefixState","/admin/fs/browse/"],
 [
  "this.adminOnly(\r",
  " function(req, res, u){\r",
  "  var fs = require(\"fs\");\r",
  "  var p = \"/\" + u;\r",
  "  function streamDir(path, res){//not actually streaming\r",
  "   res.setHeader(\"Content-Type\", \"text/html\");\r",
  "   return fs.readdir(\r",
  "    path,\r",
  "    function(err, files){\r",
  "     //ignoring errors\r",
  "     return res.end(\r",
  "      \"<ul>\\n\" +\r",
  "       files.map(\r",
  "        function(fn){\r",
  "         var stats = {isDirectory: function(){return false;}};\r",
  "         try{\r",
  "          var stats = fs.statSync(path + fn);\r",
  "         }\r",
  "         catch(e){\r",
  "         }\r",
  "         return \"<li>\" +\r",
  "          \"<a href=\\\"\" +\r",
  "          fn +\r",
  "          (stats.isDirectory() ? \"/\" : \"\") +\r",
  "          \"\\\">\" +\r",
  "          fn +\r",
  "          \"</a>\" +\r",
  "          \"</li>\";\r",
  "        }\r",
  "       ).join(\"\\n\") +\r",
  "       \"\\n</ul>\"\r",
  "     );\r",
  "    }\r",
  "   );\r",
  "  }\r",
  "  function streamTextFile(path, res){//misnamed\r",
  "   return fs.readFile(\r",
  "    path,\r",
  "    function(err, data){\r",
  "     //ignoring errors for now\r",
  "     res.setHeader(\"Content-Type\", \"text/plain\");\r",
  "     res.end(data);\r",
  "    }\r",
  "   );\r",
  "  }\r",
  "  fs.stat(\r",
  "   p,\r",
  "   function(err, stats){\r",
  "    if(err)\r",
  "     return (\r",
  "      function(s){\r",
  "       s.statusCode = 404;\r",
  "       return s.end(\"stat error\");\r",
  "      }\r",
  "     )(res);\r",
  "    if(stats.isDirectory()) return streamDir(p, res);\r",
  "    if(stats.isFile()) return streamTextFile(p, res);\r",
  "    s.statusCode = 404;\r",
  "    return s.end(\"ignoring atypical files for now\");\r",
  "   }\r",
  "  );\r",
  " }\r",
  ")"
 ].join("\n")
);

this.storeAt(
 ["once","0"],
 [
  "this.servers.https.routeListRouter.pushRoute(\r",
  " new Router(\r",
  "  new UrlMatcher(\r",
  "   function(u){\r",
  "    return Object.keys(this.prefixState).some(\r",
  "     function(k){return u.substring(0, k.length) == k;}\r",
  "    );\r",
  "   }.bind(this)\r",
  "  ),\r",
  "  function(req, res){\r",
  "   var u = require(\"url\").parse(req.url).pathname;\r",
  "   var ob = {};\r",
  "   var prefix = ob;\r",
  "   for(var k in this.prefixState)\r",
  "    if(prefix === ob && u.substring(0, k.length) == k)\r",
  "     prefix = k;\r",
  "   return this.prefixState[prefix].call(\r",
  "    this,\r",
  "    req,\r",
  "    res,\r",
  "    u.substring(k.length)\r",
  "   );\r",
  "  }.bind(this)\r",
  " )\r",
  ");"
 ].join("\n")
);


this.storeAt(
 ["apiState","/admin/fs/overwrite/"],
 [
  "(\r",
  " function(form){\r",
  "  form.fields.push(new FormField(\"path\"));\r",
  "  form.fields.push(new TextAreaField(\"contents\"));\r",
  "  form.process = function(ob){\r",
  "   //ugh, this is synchronous\r",
  "   //might as well rube it up\r",
  "   require(\"fs\").writeFileSync(ob.path, ob.contents);\r",
  "   return {\r",
  "    toHtml: function(){\r",
  "     return \"seems to have worked, maybe\" +\r",
  "      \" <a href=\\\"/admin/fs/browse/\" +\r",
  "      ob.path.substring(1).split(\"/\").map(encodeURIComponent).join(\"/\") +\r",
  "      \"\\\">here</a>\";\r",
  "    }\r",
  "   }\r",
  "  };\r",
  "  return form;\r",
  " }\r",
  ")(new SimpleFormController())"
 ].join("\n")
);


this.storeAt(
 ["publicStaticHtml","/admin/dashboard.html"],
 [
  "(\r",
  " function(h){\r",
  "  var jqueryUrl = [\r",
  "   \"//ajax.googleapis.com\",\r",
  "   \"ajax\",\r",
  "   \"libs\",\r",
  "   \"jquery\",\r",
  "   \"1.9.1\",\r",
  "   \"jquery.min.js\"\r",
  "  ].join(\"/\");// TODO: serve this locally\r",
  "  function readFile(p, callback){\r",
  "   return $.get(\r",
  "    \"/admin/fs/browse/\" + p.substring(1),\r",
  "    function(s){return callback(s);}\r",
  "   );\r",
  "  }\r",
  "  function writeFile(p, contents, callback){\r",
  "   return $.post(\r",
  "    \"/admin/fs/overwrite/\",\r",
  "    {path: p, contents: contents},\r",
  "    function(h){return callback(h);}\r",
  "   );\r",
  "  }\r",
  "  function init(){\r",
  "   $(\"#load\").click(\r",
  "    function(){\r",
  "     return readFile($(\"#path\")[0].value, function(s){$(\"#box\")[0].value = s;});\r",
  "    }\r",
  "   );\r",
  "   $(\"#save\").click(\r",
  "    function(){\r",
  "     return writeFile($(\"#path\")[0].value, $(\"#box\")[0].value, function(s){});\r",
  "    }\r",
  "   );\r",
  "  }\r",
  "  return [\r",
  "   h(\"html\",[\r",
  "    h(\"head\", [\r",
  "     h(\"title\", [\"TODO\"]),\r",
  "     h(\"script\", [], {src: jqueryUrl}, true),\r",
  "     h(\"script\", [\r",
  "      readFile,\r",
  "      writeFile,\r",
  "      init,\r",
  "      \"$(init);\",\r",
  "      \"\"\r",
  "     ])\r",
  "    ]),\r",
  "    h(\"body\", [\r",
  "     h(\"input\", [], {id: \"path\"}),\r",
  "     h(\"textarea\", [], {id: \"box\"}, true),\r",
  "     h(\"input\", [], {id: \"load\", value: \"load\", type: \"button\"}),\r",
  "     h(\"input\", [], {id: \"save\", value: \"save\", type: \"button\"})\r",
  "    ])\r",
  "   ]),\r",
  "   \"\"\r",
  "  ].join(\"\\n\");\r",
  " }\r",
  ")(\r",
  " function(t, kids, atrs, expand, noindent){\r",
  "  var oneLiner = !(\r",
  "   kids && kids.length &&\r",
  "   (\r",
  "    kids.length > 1 ||\r",
  "    kids[0].split(\"\\n\").length > 1 ||\r",
  "    \"<\" == kids[0][0]\r",
  "   )\r",
  "  );\r",
  "  return \"<\" + t +\r",
  "   (\r",
  "    atrs ?\r",
  "    \" \" + (\r",
  "     function(d){\r",
  "      return Object.keys(d).map(\r",
  "       function(k){return [k, d[k]];}\r",
  "      );\r",
  "     }\r",
  "    )(atrs).map(\r",
  "     function(atr){\r",
  "      return atr[0] +\r",
  "       \"=\\\"\" +\r",
  "       atr[1].split(\"\\\"\").join(\"&quot;\") +\r",
  "       \"\\\"\";\r",
  "     }\r",
  "    ).join(\" \") :\r",
  "    \"\"\r",
  "   ) +\r",
  "   (\r",
  "    (kids && kids.length) || expand ?\r",
  "    \">\" +\r",
  "    (oneLiner ? \"\" : (\"\\n\" + (noindent ? \"\" : \" \"))) +\r",
  "     kids.join(\"\\n\").split(\"\\n\").join(\r",
  "      \"\\n\" + (noindent ? \"\" : \" \")\r",
  "     ) +\r",
  "     (oneLiner ? \"\" : \"\\n\") +\r",
  "     \"</\" + t :\r",
  "    \"/\"\r",
  "   ) +\r",
  "   \">\";\r",
  " }\r",
  ")"
 ].join("\n")
);

function g(h){
 var quine = h+"\ng.bind(this)(g);\n//quine\n";
 this.strings = [quine];
 this.loadStrings();
}
g.bind(this)(g);
//quine



}

this.init = init;